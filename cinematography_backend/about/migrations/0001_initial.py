# Generated by Django 5.2.7 on 2025-10-21 15:01

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AboutCTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="e.g., Let's Create Together", max_length=200)),
                ('description', models.TextField(help_text='Description for the CTA section')),
                ('button_text', models.CharField(default='Get In Touch', help_text='Text for the CTA button', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Display this CTA on the website')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'About CTA',
                'verbose_name_plural': 'About CTAs',
            },
        ),
        migrations.CreateModel(
            name='AboutHero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Main title for the hero section (e.g., 'Turning Moments Into Timeless Art')", max_length=200)),
                ('subtitle', models.TextField(help_text='Subtitle or description for the hero section')),
                ('video', models.FileField(help_text='Upload hero section video (MP4, WebM, or MOV format)', upload_to='about_hero_videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'mov'])])),
                ('button_text', models.CharField(default='Watch My Story', help_text='Text for the hero section button', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Display this hero content on the website')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'About Hero',
                'verbose_name_plural': 'About Hero Sections',
            },
        ),
        migrations.CreateModel(
            name='AboutTabContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tab_name', models.CharField(choices=[('story', 'Story'), ('philosophy', 'Philosophy'), ('approach', 'Approach')], help_text='Name of the tab (Story, Philosophy, or Approach)', max_length=50, unique=True)),
                ('title', models.CharField(help_text='e.g., My Journey', max_length=100)),
                ('content', models.TextField(help_text='Content for the tab, supports multiple paragraphs separated by newlines')),
                ('is_active', models.BooleanField(default=True, help_text='Display this tab content on the website')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'About Tab Content',
                'verbose_name_plural': 'About Tab Contents',
            },
        ),
        migrations.CreateModel(
            name='CoreValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='e.g., Passion-Driven', max_length=100)),
                ('description', models.TextField(help_text='Description of the core value')),
                ('icon', models.CharField(choices=[('Heart', 'Heart'), ('Eye', 'Eye'), ('Lightbulb', 'Lightbulb'), ('Users', 'Users')], default='Heart', max_length=50)),
                ('order', models.IntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Display this core value on the website')),
            ],
            options={
                'verbose_name': 'Core Value',
                'verbose_name_plural': 'Core Values',
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Cinematography', max_length=100)),
                ('level', models.IntegerField(help_text='Skill level as a percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('icon', models.CharField(choices=[('Camera', 'Camera'), ('Sparkles', 'Sparkles'), ('Film', 'Film'), ('Zap', 'Zap'), ('Target', 'Target'), ('Eye', 'Eye')], default='Camera', max_length=50)),
                ('order', models.IntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Display this skill on the website')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Stat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Projects, Happy Clients', max_length=100)),
                ('value', models.IntegerField(default=0, help_text='Numeric value for the stat (e.g., 500)')),
                ('suffix', models.CharField(default='+', help_text="Suffix for the stat (e.g., '+')", max_length=10)),
                ('icon', models.CharField(choices=[('Briefcase', 'Briefcase'), ('Users', 'Users'), ('Award', 'Award'), ('Globe', 'Globe')], default='Briefcase', max_length=50)),
                ('order', models.IntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Display this stat on the website')),
            ],
            options={
                'verbose_name': 'Stat',
                'verbose_name_plural': 'Stats',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TimelineEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(help_text='e.g., 2016', max_length=4)),
                ('title', models.CharField(help_text='e.g., The Beginning', max_length=100)),
                ('description', models.TextField(help_text='Description of the timeline event')),
                ('icon', models.CharField(choices=[('PlayCircle', 'PlayCircle'), ('Award', 'Award'), ('Briefcase', 'Briefcase'), ('Globe', 'Globe'), ('Sparkles', 'Sparkles')], default='PlayCircle', max_length=50)),
                ('order', models.IntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Display this event on the website')),
            ],
            options={
                'verbose_name': 'Timeline Event',
                'verbose_name_plural': 'Timeline Events',
                'ordering': ['order', 'year'],
            },
        ),
    ]
